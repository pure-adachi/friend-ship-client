import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type AccessToken = {
  __typename?: 'AccessToken';
  id: Scalars['ID'];
  token: Scalars['String'];
};

export type Answer = {
  __typename?: 'Answer';
  id: Scalars['ID'];
  offer: Offer;
  sdp: Scalars['String'];
};

/** Autogenerated input type of CreateAnswer */
export type CreateAnswerInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  offerId: Scalars['String'];
  sdp: Scalars['String'];
};

/** Autogenerated return type of CreateAnswer */
export type CreateAnswerPayload = {
  __typename?: 'CreateAnswerPayload';
  answer?: Maybe<Answer>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of CreateOffer */
export type CreateOfferInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  sdp: Scalars['String'];
};

/** Autogenerated return type of CreateOffer */
export type CreateOfferPayload = {
  __typename?: 'CreateOfferPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  offer?: Maybe<Offer>;
  result?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of Login */
export type LoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  loginid: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of Login */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['Boolean']>;
  user?: Maybe<User>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createAnswer?: Maybe<CreateAnswerPayload>;
  createOffer?: Maybe<CreateOfferPayload>;
  login?: Maybe<LoginPayload>;
};


export type MutationCreateAnswerArgs = {
  input: CreateAnswerInput;
};


export type MutationCreateOfferArgs = {
  input: CreateOfferInput;
};


export type MutationLoginArgs = {
  input: LoginInput;
};

export type Offer = {
  __typename?: 'Offer';
  id: Scalars['ID'];
  sdp: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  sampleOffer?: Maybe<Offer>;
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  accessToken?: Maybe<AccessToken>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type CreateAnswerMutationVariables = Exact<{
  offerId: Scalars['String'];
  sdp: Scalars['String'];
}>;


export type CreateAnswerMutation = { __typename?: 'Mutation', createAnswer?: { __typename?: 'CreateAnswerPayload', result?: boolean | null | undefined, answer?: { __typename?: 'Answer', id: string, sdp: string } | null | undefined } | null | undefined };

export type CreateOfferMutationVariables = Exact<{
  sdp: Scalars['String'];
}>;


export type CreateOfferMutation = { __typename?: 'Mutation', createOffer?: { __typename?: 'CreateOfferPayload', result?: boolean | null | undefined, offer?: { __typename?: 'Offer', id: string, sdp: string } | null | undefined } | null | undefined };

export type LoginMutationVariables = Exact<{
  loginid: Scalars['String'];
  password: Scalars['String'];
}>;


export type LoginMutation = { __typename?: 'Mutation', login?: { __typename?: 'LoginPayload', result?: boolean | null | undefined, user?: { __typename?: 'User', accessToken?: { __typename?: 'AccessToken', token: string } | null | undefined } | null | undefined } | null | undefined };

export type IsLoggedInQueryVariables = Exact<{ [key: string]: never; }>;


export type IsLoggedInQuery = { __typename?: 'Query', viewer?: { __typename?: 'User', id: string } | null | undefined };

export type SampleOfferQueryVariables = Exact<{ [key: string]: never; }>;


export type SampleOfferQuery = { __typename?: 'Query', sampleOffer?: { __typename?: 'Offer', id: string, sdp: string } | null | undefined };

export type ViewerNameQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerNameQuery = { __typename?: 'Query', viewer?: { __typename?: 'User', name?: string | null | undefined } | null | undefined };


export const CreateAnswerDocument = gql`
    mutation createAnswer($offerId: String!, $sdp: String!) {
  createAnswer(input: {offerId: $offerId, sdp: $sdp}) {
    answer {
      id
      sdp
    }
    result
  }
}
    `;
export type CreateAnswerMutationFn = Apollo.MutationFunction<CreateAnswerMutation, CreateAnswerMutationVariables>;

/**
 * __useCreateAnswerMutation__
 *
 * To run a mutation, you first call `useCreateAnswerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAnswerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAnswerMutation, { data, loading, error }] = useCreateAnswerMutation({
 *   variables: {
 *      offerId: // value for 'offerId'
 *      sdp: // value for 'sdp'
 *   },
 * });
 */
export function useCreateAnswerMutation(baseOptions?: Apollo.MutationHookOptions<CreateAnswerMutation, CreateAnswerMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateAnswerMutation, CreateAnswerMutationVariables>(CreateAnswerDocument, options);
      }
export type CreateAnswerMutationHookResult = ReturnType<typeof useCreateAnswerMutation>;
export type CreateAnswerMutationResult = Apollo.MutationResult<CreateAnswerMutation>;
export type CreateAnswerMutationOptions = Apollo.BaseMutationOptions<CreateAnswerMutation, CreateAnswerMutationVariables>;
export const CreateOfferDocument = gql`
    mutation createOffer($sdp: String!) {
  createOffer(input: {sdp: $sdp}) {
    offer {
      id
      sdp
    }
    result
  }
}
    `;
export type CreateOfferMutationFn = Apollo.MutationFunction<CreateOfferMutation, CreateOfferMutationVariables>;

/**
 * __useCreateOfferMutation__
 *
 * To run a mutation, you first call `useCreateOfferMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOfferMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOfferMutation, { data, loading, error }] = useCreateOfferMutation({
 *   variables: {
 *      sdp: // value for 'sdp'
 *   },
 * });
 */
export function useCreateOfferMutation(baseOptions?: Apollo.MutationHookOptions<CreateOfferMutation, CreateOfferMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateOfferMutation, CreateOfferMutationVariables>(CreateOfferDocument, options);
      }
export type CreateOfferMutationHookResult = ReturnType<typeof useCreateOfferMutation>;
export type CreateOfferMutationResult = Apollo.MutationResult<CreateOfferMutation>;
export type CreateOfferMutationOptions = Apollo.BaseMutationOptions<CreateOfferMutation, CreateOfferMutationVariables>;
export const LoginDocument = gql`
    mutation login($loginid: String!, $password: String!) {
  login(input: {loginid: $loginid, password: $password}) {
    user {
      accessToken {
        token
      }
    }
    result
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      loginid: // value for 'loginid'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const IsLoggedInDocument = gql`
    query isLoggedIn {
  viewer {
    id
  }
}
    `;

/**
 * __useIsLoggedInQuery__
 *
 * To run a query within a React component, call `useIsLoggedInQuery` and pass it any options that fit your needs.
 * When your component renders, `useIsLoggedInQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIsLoggedInQuery({
 *   variables: {
 *   },
 * });
 */
export function useIsLoggedInQuery(baseOptions?: Apollo.QueryHookOptions<IsLoggedInQuery, IsLoggedInQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<IsLoggedInQuery, IsLoggedInQueryVariables>(IsLoggedInDocument, options);
      }
export function useIsLoggedInLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IsLoggedInQuery, IsLoggedInQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<IsLoggedInQuery, IsLoggedInQueryVariables>(IsLoggedInDocument, options);
        }
export type IsLoggedInQueryHookResult = ReturnType<typeof useIsLoggedInQuery>;
export type IsLoggedInLazyQueryHookResult = ReturnType<typeof useIsLoggedInLazyQuery>;
export type IsLoggedInQueryResult = Apollo.QueryResult<IsLoggedInQuery, IsLoggedInQueryVariables>;
export const SampleOfferDocument = gql`
    query sampleOffer {
  sampleOffer {
    id
    sdp
  }
}
    `;

/**
 * __useSampleOfferQuery__
 *
 * To run a query within a React component, call `useSampleOfferQuery` and pass it any options that fit your needs.
 * When your component renders, `useSampleOfferQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSampleOfferQuery({
 *   variables: {
 *   },
 * });
 */
export function useSampleOfferQuery(baseOptions?: Apollo.QueryHookOptions<SampleOfferQuery, SampleOfferQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SampleOfferQuery, SampleOfferQueryVariables>(SampleOfferDocument, options);
      }
export function useSampleOfferLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SampleOfferQuery, SampleOfferQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SampleOfferQuery, SampleOfferQueryVariables>(SampleOfferDocument, options);
        }
export type SampleOfferQueryHookResult = ReturnType<typeof useSampleOfferQuery>;
export type SampleOfferLazyQueryHookResult = ReturnType<typeof useSampleOfferLazyQuery>;
export type SampleOfferQueryResult = Apollo.QueryResult<SampleOfferQuery, SampleOfferQueryVariables>;
export const ViewerNameDocument = gql`
    query viewerName {
  viewer {
    name
  }
}
    `;

/**
 * __useViewerNameQuery__
 *
 * To run a query within a React component, call `useViewerNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useViewerNameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerNameQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerNameQuery(baseOptions?: Apollo.QueryHookOptions<ViewerNameQuery, ViewerNameQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerNameQuery, ViewerNameQueryVariables>(ViewerNameDocument, options);
      }
export function useViewerNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerNameQuery, ViewerNameQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerNameQuery, ViewerNameQueryVariables>(ViewerNameDocument, options);
        }
export type ViewerNameQueryHookResult = ReturnType<typeof useViewerNameQuery>;
export type ViewerNameLazyQueryHookResult = ReturnType<typeof useViewerNameLazyQuery>;
export type ViewerNameQueryResult = Apollo.QueryResult<ViewerNameQuery, ViewerNameQueryVariables>;
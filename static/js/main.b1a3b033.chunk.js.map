{"version":3,"sources":["generated/graphql.ts","components/atoms/Authentication/index.tsx","components/templates/Frame/index.tsx","utils/WebRTC/index.ts","utils/WebSocket/index.ts","utils/WebSocket/PublicCable/index.ts","utils/WebSocket/MyCable/index.ts","utils/WebAgent/index.ts","components/atoms/Video/index.tsx","components/atoms/Audio/index.tsx","components/molecules/WebRTCRoom/index.tsx","components/organisms/OnlineRoom/index.tsx","components/pages/Main/index.tsx","components/atoms/InputText/index.tsx","components/atoms/InputPassword/index.tsx","components/organisms/LoginForm/index.tsx","components/pages/Login/index.tsx","components/pages/NotMatch/index.tsx","middleware/index.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultOptions","LoginDocument","gql","ViewerDocument","ViewerIdDocument","useViewerIdQuery","baseOptions","options","Apollo","Authentication","children","fetchPolicy","loading","data","viewer","to","Frame","className","WebRTC","currentUserId","handleUpdate","handleError","publicCable","myCable","localStream","peerConnections","connectionConfig","iceServers","urls","isEnableAudio","isEnableVideo","this","Promise","resolve","a","navigator","mediaDevices","getUserMedia","audio","video","then","stream","catch","e","message","userGuid","channelName","initPeerConnection","sdp","send","receiverGuid","createOffer","channel","close","senderGuid","disconnect","description","RTCSessionDescription","type","connection","setRemoteDescription","createAnswer","callbackSdp","RTCPeerConnection","createDataChannel","onicecandidate","event","candidate","localDescription","onnegotiationneeded","remoteDescription","console","log","sessionDescription","str","JSON","stringify","ontrack","streams","track","kind","videoStream","audioStream","ondatachannel","addVideoTrack","addAudioTrack","onopen","onclose","onerror","onmessage","msg","obj","parse","volume","setLocalDescription","getVideoTracks","addTrack","getAudioTracks","WebSocket","rtc","subscriptions","cable","webSocketUrl","process","localStorage","getItem","ActionCable","createConsumer","unsubscribe","perform","PublicCable","create","connected","received","messages","handleMessage","disconnected","notifyOffline","online","handleOnlineMessage","offline","handleOfflineMessage","user_guid","connect","MyCable","command","values","offer","handleOfferMessage","answer","handleAnswerMessage","sender_guid","setOffer","setAnswer","WebAgent","all","setup","notifyOnline","Video","videoElm","useRef","useEffect","current","srcObject","play","getTracks","forEach","stop","ref","autoPlay","playsInline","Audio","audioElm","controls","WebRTCRoom","props","state","webAgent","updateRTC","bind","setError","ready","error","setState","leave","onClick","removeItem","Object","keys","map","Component","OnlineRoom","useViewerQuery","userId","id","userName","name","Main","TextInput","InputPassword","LoginForm","history","useNavigate","useState","loginid","setLoginid","password","setPassword","useLoginMutation","update","_","response","login","user","token","accessToken","result","toast","success","setItem","variables","InputText","value","onChange","currentTarget","disabled","htmlFor","icon","faUser","faLockOpen","Login","NotMatch","httpLink","createHttpLink","uri","authLink","setContext","headers","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","basename","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1a3b033.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AccessToken = {\n  __typename?: 'AccessToken';\n  id: Scalars['ID'];\n  token: Scalars['String'];\n};\n\n/** Autogenerated input type of Login */\nexport type LoginInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  loginid: Scalars['String'];\n  password: Scalars['String'];\n};\n\n/** Autogenerated return type of Login */\nexport type LoginPayload = {\n  __typename?: 'LoginPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  result?: Maybe<Scalars['Boolean']>;\n  user?: Maybe<User>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  login?: Maybe<LoginPayload>;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  viewer?: Maybe<User>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  accessToken?: Maybe<AccessToken>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  loginid: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', login?: { __typename?: 'LoginPayload', result?: boolean | null | undefined, user?: { __typename?: 'User', accessToken?: { __typename?: 'AccessToken', token: string } | null | undefined } | null | undefined } | null | undefined };\n\nexport type ViewerQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ViewerQuery = { __typename?: 'Query', viewer?: { __typename?: 'User', id: string, name?: string | null | undefined } | null | undefined };\n\nexport type ViewerIdQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ViewerIdQuery = { __typename?: 'Query', viewer?: { __typename?: 'User', id: string } | null | undefined };\n\n\nexport const LoginDocument = gql`\n    mutation login($loginid: String!, $password: String!) {\n  login(input: {loginid: $loginid, password: $password}) {\n    user {\n      accessToken {\n        token\n      }\n    }\n    result\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      loginid: // value for 'loginid'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const ViewerDocument = gql`\n    query viewer {\n  viewer {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useViewerQuery__\n *\n * To run a query within a React component, call `useViewerQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewerQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);\n      }\nexport function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);\n        }\nexport type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;\nexport type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;\nexport type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;\nexport const ViewerIdDocument = gql`\n    query viewerId {\n  viewer {\n    id\n  }\n}\n    `;\n\n/**\n * __useViewerIdQuery__\n *\n * To run a query within a React component, call `useViewerIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewerIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewerIdQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useViewerIdQuery(baseOptions?: Apollo.QueryHookOptions<ViewerIdQuery, ViewerIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ViewerIdQuery, ViewerIdQueryVariables>(ViewerIdDocument, options);\n      }\nexport function useViewerIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerIdQuery, ViewerIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ViewerIdQuery, ViewerIdQueryVariables>(ViewerIdDocument, options);\n        }\nexport type ViewerIdQueryHookResult = ReturnType<typeof useViewerIdQuery>;\nexport type ViewerIdLazyQueryHookResult = ReturnType<typeof useViewerIdLazyQuery>;\nexport type ViewerIdQueryResult = Apollo.QueryResult<ViewerIdQuery, ViewerIdQueryVariables>;","import React, { ReactNode } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { useViewerIdQuery } from \"../../../generated/graphql\";\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Authentication = ({ children }: Props) => {\n  const { loading, data } = useViewerIdQuery({ fetchPolicy: \"network-only\" });\n  const viewer = data?.viewer;\n\n  if (loading) {\n    return <>Loading ...</>;\n  } else if (!viewer) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return <>{children}</>;\n};\n\nexport default Authentication;\n","import React, { ReactNode } from \"react\";\nimport Authentication from \"../../atoms/Authentication\";\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Frame = ({ children }: Props) => {\n  return (\n    <Authentication>\n      <div className=\"main\">{children}</div>\n    </Authentication>\n  );\n};\n\nexport default Frame;\n","import PublicCable from \"../WebSocket/PublicCable\";\nimport MyCable from \"../WebSocket/MyCable\";\nimport { WebRTCTypes } from \"../../types\";\n\nclass WebRTC {\n  public publicCable: PublicCable | null = null;\n  public myCable: MyCable | null = null;\n  public localStream: WebRTCTypes.Stream = null;\n  public peerConnections: WebRTCTypes.PeerConnections = {};\n  private connectionConfig = {\n    iceServers: [\n      { urls: \"stun:stun.l.google.com:19302\" },\n      { urls: \"stun:stun1.l.google.com:19302\" },\n      { urls: \"stun:stun2.l.google.com:19302\" },\n    ],\n  };\n  private currentUserId: string;\n  private isEnableAudio: boolean = true;\n  private isEnableVideo: boolean = true;\n  private handleUpdate: Function;\n  private handleError: Function;\n\n  constructor(\n    currentUserId: string,\n    handleUpdate: Function,\n    handleError: Function\n  ) {\n    this.currentUserId = currentUserId;\n    this.handleUpdate = handleUpdate;\n    this.handleError = handleError;\n  }\n\n  public setup(): Promise<void> {\n    return new Promise(async (resolve) => {\n      await navigator.mediaDevices\n        .getUserMedia({\n          audio: this.isEnableAudio,\n          video: this.isEnableVideo,\n        })\n        .then((stream) => {\n          this.localStream = stream;\n          resolve();\n        })\n        .catch((e) => {\n          this.handleError(e.message);\n        });\n    });\n  }\n\n  public connect(userGuid: string) {\n    const channelName = `channel-${this.currentUserId}_${userGuid}`;\n    this.peerConnections[userGuid] = this.initPeerConnection(\n      userGuid,\n      channelName,\n      (sdp: string) => {\n        this.myCable?.send(\"offer\", {\n          sdp,\n          receiverGuid: userGuid,\n        });\n      }\n    );\n\n    this.createOffer(userGuid);\n  }\n\n  public disconnect(userGuid: string) {\n    if (this.peerConnections[userGuid]) {\n      this.peerConnections[userGuid].channel.close();\n      delete this.peerConnections[userGuid];\n    }\n  }\n\n  public setOffer(senderGuid: string, sdp: string) {\n    if (this.peerConnections[senderGuid]) this.disconnect(senderGuid);\n\n    const description = new RTCSessionDescription({\n      type: \"offer\",\n      sdp,\n    });\n\n    const channelName = `channel-${senderGuid}_${this.currentUserId}`;\n    this.peerConnections[senderGuid] = this.initPeerConnection(\n      senderGuid,\n      channelName,\n      (sdp: string) => {\n        this.myCable?.send(\"answer\", {\n          sdp,\n          receiverGuid: senderGuid,\n        });\n      }\n    );\n\n    this.peerConnections[senderGuid].connection\n      .setRemoteDescription(description)\n      .then(() => {\n        this.createAnswer(senderGuid);\n      });\n  }\n\n  public setAnswer(senderGuid: string, sdp: string) {\n    const description = new RTCSessionDescription({\n      type: \"answer\",\n      sdp,\n    });\n\n    this.peerConnections[senderGuid].connection.setRemoteDescription(\n      description\n    );\n  }\n\n  private initPeerConnection(\n    userGuid: string,\n    channelName: string,\n    callbackSdp: Function\n  ): WebRTCTypes.PeerConnection {\n    const connection = new RTCPeerConnection(this.connectionConfig);\n    const channel = connection.createDataChannel(channelName);\n\n    connection.onicecandidate = (event) => {\n      if (!event.candidate && connection.localDescription?.sdp) {\n        callbackSdp(connection.localDescription.sdp);\n      }\n    };\n\n    if (userGuid === \"VXNlci0y\") {\n      connection.onnegotiationneeded = (event) => {\n        if (!this.peerConnections[userGuid].connection.localDescription) return;\n        if (!this.peerConnections[userGuid].connection.remoteDescription)\n          return;\n\n        // Add Trackした時に通る\n        console.log(\"onnegotiationneeded\", event);\n\n        this.createOffer(userGuid).then((sessionDescription) => {\n          const str = JSON.stringify(sessionDescription);\n          this.peerConnections[userGuid].channel.send(str);\n        });\n      };\n    }\n\n    connection.ontrack = (event) => {\n      console.log(\"ontrack\", event);\n\n      const stream = event.streams[0];\n      const track = event.track;\n\n      if (track.kind === \"video\") {\n        this.peerConnections[userGuid].videoStream = stream;\n      } else if (track.kind === \"audio\") {\n        this.peerConnections[userGuid].audioStream = stream;\n      }\n\n      this.handleUpdate();\n    };\n\n    connection.ondatachannel = (event) => {\n      // datachannel open時に通る\n      console.log(\"ondatachannel\", event);\n      this.peerConnections[userGuid].channel = event.channel;\n\n      this.addVideoTrack(userGuid);\n      this.addAudioTrack(userGuid);\n    };\n\n    channel.onopen = () => {\n      console.log(\"datachannel open\");\n    };\n\n    channel.onclose = () => {\n      console.log(\"datachannel close\");\n    };\n\n    channel.onerror = (e) => {\n      console.log(\"datachannel error\", e);\n    };\n\n    channel.onmessage = (event) => {\n      const msg = event.data;\n      const obj = JSON.parse(msg);\n\n      if (obj.type === \"text\") {\n        console.log(\"onmessage text\", msg);\n      } else if (obj.type === \"offer\") {\n        console.log(\"onmessage offer\");\n        this.peerConnections[userGuid].connection.setRemoteDescription(obj);\n        this.createAnswer(userGuid).then((sessionDescription) => {\n          const str = JSON.stringify(sessionDescription);\n          this.peerConnections[userGuid].channel.send(str);\n        });\n      } else if (obj.type === \"answer\") {\n        console.log(\"onmessage answer\");\n        this.peerConnections[userGuid].connection.setRemoteDescription(obj);\n      }\n    };\n\n    return {\n      connection,\n      channel,\n      volume: 0.5,\n    };\n  }\n\n  private createOffer(userGuid: string) {\n    return this.peerConnections[userGuid].connection\n      .createOffer({})\n      .then((sessionDescription) => {\n        this.peerConnections[userGuid].connection.setLocalDescription(\n          sessionDescription\n        );\n\n        return sessionDescription;\n      });\n  }\n\n  private createAnswer(userGuid: string) {\n    return this.peerConnections[userGuid].connection\n      .createAnswer({})\n      .then((sessionDescription) => {\n        this.peerConnections[userGuid].connection.setLocalDescription(\n          sessionDescription\n        );\n\n        return sessionDescription;\n      });\n  }\n\n  private addVideoTrack(userGuid: string) {\n    if (!this.localStream) return;\n\n    const track = this.localStream.getVideoTracks()[0];\n    this.peerConnections[userGuid].connection.addTrack(track, this.localStream);\n  }\n\n  private addAudioTrack(userGuid: string) {\n    if (!this.localStream) return;\n\n    const track = this.localStream.getAudioTracks()[0];\n    this.peerConnections[userGuid].connection.addTrack(track, this.localStream);\n  }\n}\n\nexport default WebRTC;\n","import ActionCable from \"actioncable\";\nimport WebRTC from \"../WebRTC\";\nimport { WebSocketTypes } from \"../../types\";\n\nclass WebSocket {\n  public rtc: WebRTC | null;\n  protected subscriptions: ActionCable.Subscriptions;\n  protected cable: WebSocketTypes.Cable;\n  protected currentUserId: string;\n  private webSocketUrl: string = `${\n    process.env.REACT_APP_SERVER_URL\n  }/cable?access_token=${localStorage.getItem(\"access_token\")}`;\n\n  constructor(currentUserId: string) {\n    this.rtc = null;\n    this.currentUserId = currentUserId;\n    this.subscriptions = ActionCable.createConsumer(\n      this.webSocketUrl\n    ).subscriptions;\n    this.cable = null;\n  }\n\n  public disconnect() {\n    this.cable?.unsubscribe();\n  }\n\n  protected notifyOffline() {\n    this.cable?.perform(\"offline\", {});\n  }\n}\n\nexport default WebSocket;\n","import WebSocket from \"../../WebSocket\";\nimport { WebSocketTypes } from \"../../../types\";\n\nclass PublicCable extends WebSocket {\n  public setup(): Promise<void> {\n    return new Promise((resolve) => {\n      this.cable = this.subscriptions.create(\"PostChannel\", {\n        connected: () => {\n          resolve();\n        },\n        received: (messages: WebSocketTypes.Messages) => {\n          this.handleMessage(messages);\n        },\n        disconnected: () => {\n          this.notifyOffline();\n        },\n      });\n    });\n  }\n\n  public notifyOnline() {\n    this.cable?.perform(\"online\", {});\n  }\n\n  private handleMessage(messages: WebSocketTypes.Messages) {\n    if (messages.online) {\n      this.handleOnlineMessage(messages.online);\n    } else if (messages.offline) {\n      this.handleOfflineMessage(messages.offline);\n    }\n  }\n\n  private handleOnlineMessage({\n    user_guid: userGuid,\n  }: WebSocketTypes.MessageUserGuid) {\n    // 自分の通知は無視\n    if (this.currentUserId === userGuid) return;\n\n    console.log(`${userGuid} がオンライン`);\n\n    this.rtc?.connect(userGuid);\n  }\n\n  private handleOfflineMessage({\n    user_guid: userGuid,\n  }: WebSocketTypes.MessageUserGuid) {\n    // 自分の通知は無視\n    if (this.currentUserId === userGuid) return;\n\n    console.log(`${userGuid} がオフライン`);\n\n    this.rtc?.disconnect(userGuid);\n  }\n}\n\nexport default PublicCable;\n","import WebSocket from \"../../WebSocket\";\nimport { WebSocketTypes } from \"../../../types\";\n\nclass MyCable extends WebSocket {\n  public setup(): Promise<void> {\n    return new Promise((resolve) => {\n      this.cable = this.subscriptions.create(\"UserChannel\", {\n        connected: () => {\n          resolve();\n        },\n        received: (messages: WebSocketTypes.Messages) => {\n          this.handleMessage(messages);\n        },\n        disconnected: () => {\n          this.notifyOffline();\n        },\n      });\n    });\n  }\n\n  public send(command: string, values: Object) {\n    this.cable?.perform(command, values);\n  }\n\n\n  private handleMessage(messages: WebSocketTypes.Messages) {\n    if (messages.offer) {\n      this.handleOfferMessage(messages.offer);\n    } else if (messages.answer) {\n      this.handleAnswerMessage(messages.answer);\n    }\n  }\n\n  private handleOfferMessage({\n    sdp,\n    sender_guid: senderGuid,\n  }: WebSocketTypes.MessageOffer) {\n    console.log(\"offer受信\");\n\n    this.rtc?.setOffer(senderGuid, sdp);\n  }\n\n  private handleAnswerMessage({\n    sdp,\n    sender_guid: senderGuid,\n  }: WebSocketTypes.MessageAnswer) {\n    console.log(\"answer受信\");\n\n    this.rtc?.setAnswer(senderGuid, sdp);\n  }\n}\n\nexport default MyCable;\n","import WebRTC from \"../WebRTC\";\nimport PublicCable from \"../WebSocket/PublicCable\";\nimport MyCable from \"../WebSocket/MyCable\";\n\nclass WebAgent {\n  public rtc: WebRTC;\n  private publicCable: PublicCable;\n  private myCable: MyCable;\n\n  constructor(\n    currentUserId: string,\n    handleUpdate: Function,\n    handleError: Function\n  ) {\n    this.rtc = new WebRTC(currentUserId, handleUpdate, handleError);\n    this.publicCable = new PublicCable(currentUserId);\n    this.myCable = new MyCable(currentUserId);\n\n    this.rtc.publicCable = this.publicCable;\n    this.rtc.myCable = this.myCable;\n    this.publicCable.rtc = this.rtc;\n    this.myCable.rtc = this.rtc;\n  }\n\n  public leave() {\n    this.publicCable.disconnect();\n    this.myCable.disconnect();\n  }\n\n  public setup(): Promise<void> {\n    return Promise.all([\n      this.rtc.setup(),\n      this.publicCable.setup(),\n      this.myCable.setup(),\n    ]).then(() => {\n      this.publicCable.notifyOnline();\n    });\n  }\n}\n\nexport default WebAgent;\n","import React, { useEffect, useRef } from \"react\";\n\ninterface Props {\n  stream: MediaStream;\n}\n\nconst Video = ({ stream }: Props) => {\n  const videoElm = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    if (videoElm.current) {\n      videoElm.current.srcObject = stream;\n      videoElm.current.play();\n      videoElm.current.volume = 0;\n    }\n\n    return () => stream.getTracks().forEach((track) => track.stop());\n  }, [stream]);\n\n  return <video ref={videoElm} autoPlay playsInline />;\n};\n\nexport default Video;\n","import React, { useEffect, useRef } from \"react\";\n\ninterface Props {\n  stream: MediaStream;\n  volume: number;\n}\n\nconst Audio = ({ stream, volume }: Props) => {\n  const audioElm = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    if (audioElm.current) {\n      audioElm.current.srcObject = stream;\n      audioElm.current.play();\n      audioElm.current.volume = volume;\n    }\n  }, [stream, volume]);\n\n  return <audio ref={audioElm} autoPlay controls />;\n};\n\nexport default Audio;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport WebAgent from \"../../../utils/WebAgent\";\nimport Video from \"../../atoms/Video\";\nimport Audio from \"../../atoms/Audio\";\nimport { WebRTCTypes } from \"../../../types\";\n\ninterface Props {\n  currentUserId: string;\n}\n\ninterface State {\n  webAgent: WebAgent;\n  ready: boolean;\n  error: string;\n  localStream: WebRTCTypes.Stream;\n  peerConnections: WebRTCTypes.PeerConnections;\n}\n\nclass WebRTCRoom extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      webAgent: new WebAgent(\n        this.props.currentUserId,\n        this.updateRTC.bind(this),\n        this.setError.bind(this)\n      ),\n      ready: false,\n      error: \"\",\n      localStream: null,\n      peerConnections: {},\n    };\n  }\n\n  componentDidMount() {\n    this.state.webAgent.setup().then(() => {\n      this.setState({\n        ready: true,\n        localStream: this.state.webAgent.rtc.localStream,\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.webAgent.leave();\n  }\n\n  private updateRTC() {\n    this.setState({\n      peerConnections: this.state.webAgent.rtc.peerConnections,\n    });\n  }\n\n  private setError(error: string) {\n    this.setState({ error });\n  }\n\n  render() {\n    if (!this.state) return <></>;\n    if (this.state.error) return <>{this.state.error}</>;\n    if (!this.state.ready) return <>準備中...</>;\n\n    return (\n      <>\n        <div>WebRTCRoom</div>\n        <Link\n          to=\"/login\"\n          onClick={() => localStorage.removeItem(\"access_token\")}\n        >\n          Back\n        </Link>\n\n        {this.state.localStream && <Video stream={this.state.localStream} />}\n\n        {Object.keys(this.state.peerConnections).map((userGuid) => {\n          const connection = this.state.peerConnections[userGuid];\n          const videoStream = connection.videoStream;\n          const audioStream = connection.audioStream;\n          const volume = connection.volume;\n\n          return (\n            <div key={userGuid}>\n              {videoStream && <Video stream={videoStream} />}\n              {audioStream && <Audio stream={audioStream} volume={volume} />}\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n}\n\nexport default WebRTCRoom;\n","import React from \"react\";\nimport WebRTCRoom from \"../../molecules/WebRTCRoom\";\nimport { useViewerQuery } from \"../../../generated/graphql\";\n\nconst OnlineRoom = () => {\n  const { loading, data } = useViewerQuery({\n    fetchPolicy: \"network-only\",\n  });\n  const userId = data?.viewer?.id;\n  const userName = data?.viewer?.name;\n\n  if (loading) {\n    return <>Loading ...</>;\n  } else if (!userId) {\n    return <>Failed</>;\n  } else {\n    return (\n      <div>\n        <div>\n          {userName}: {userId}\n        </div>\n        <div>\n          <WebRTCRoom currentUserId={userId} />\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default OnlineRoom;\n","import React from \"react\";\nimport Frame from \"../../templates/Frame\";\nimport OnlineRoom from \"../../organisms/OnlineRoom\";\n\nconst Main = () => {\n  return (\n    <Frame>\n      <OnlineRoom />\n    </Frame>\n  );\n};\n\nexport default Main;\n","import React, { InputHTMLAttributes } from \"react\";\n\nconst TextInput = (props: InputHTMLAttributes<HTMLInputElement>) => {\n  return <input type=\"text\" {...props} />;\n};\n\nexport default TextInput;\n","import React, { InputHTMLAttributes } from \"react\";\n\nconst InputPassword = (props: InputHTMLAttributes<HTMLInputElement>) => {\n  return <input type=\"password\" {...props} />;\n};\n\nexport default InputPassword;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser, faLockOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport InputText from \"../../atoms/InputText\";\nimport InputPassword from \"../../atoms/InputPassword\";\nimport { useLoginMutation } from \"../../../generated/graphql\";\n\nconst LoginForm = () => {\n  const history = useNavigate();\n  const [loginid, setLoginid] = useState<string>();\n  const [password, setPassword] = useState<string>();\n  const [login, { loading }] = useLoginMutation({\n    update: (_, { data }) => {\n      const response = data?.login;\n      const user = response?.user;\n      const token = user?.accessToken?.token;\n\n      if (response?.result && token) {\n        toast.success(\"Successful login\");\n        localStorage.setItem(\"access_token\", token);\n        history(\"/\");\n      } else {\n        toast.error(\"Login failed\");\n      }\n    },\n    variables: {\n      loginid: loginid || \"\",\n      password: password || \"\",\n    },\n  });\n\n  return (\n    <div className=\"h-screen flex items-center justify-center bg-gradient-to-r from-yellow-400 via-red-500 to-pink-500\">\n      <div className=\"bg-gray-50 p-5 rounded-lg shadow-2xl\">\n        <div className=\"text-2xl text-center\">Login</div>\n        <div className=\"my-5\">\n          <div className=\"flex items-center border rounded mb-5\">\n            <InputText\n              value={loginid || \"\"}\n              onChange={(e) => setLoginid(e.currentTarget.value)}\n              id=\"loginid\"\n              className=\"w-full h-9 bg-transparent py-1 px-2 outline-none disabled:bg-gray-200\"\n              disabled={loading}\n            />\n            <label\n              htmlFor=\"loginid\"\n              className=\"px-3 py-1.5 bg-gray-200 border-l\"\n            >\n              <FontAwesomeIcon icon={faUser} />\n            </label>\n          </div>\n          <div className=\"flex items-center border rounded mb-5\">\n            <InputPassword\n              value={password || \"\"}\n              onChange={(e) => setPassword(e.currentTarget.value)}\n              id=\"password\"\n              className=\"w-full h-9 bg-transparent py-1 px-2 outline-none disabled:bg-gray-200\"\n              disabled={loading}\n            />\n            <label\n              htmlFor=\"password\"\n              className=\"px-3 py-1.5 bg-gray-200 border-l\"\n            >\n              <FontAwesomeIcon icon={faLockOpen} />\n            </label>\n          </div>\n        </div>\n\n        <button\n          className=\"bg-gradient-to-r from-blue-100 to-blue-200 w-full rounded-full p-2 hover:from-blue-300 hover:to-blue-400 hover:text-white\"\n          onClick={() => login()}\n          disabled={loading}\n        >\n          Login\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport LoginForm from \"../../organisms/LoginForm\";\nimport { useViewerIdQuery } from \"../../../generated/graphql\";\n\nconst Login = () => {\n  const { loading, data } = useViewerIdQuery({ fetchPolicy: \"network-only\" });\n  const viewer = data?.viewer;\n\n  if (loading) {\n    return <>Loading ...</>;\n  } else if (viewer) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return <LoginForm />;\n};\n\nexport default Login;\n","import * as React from \"react\";\n\nconst NotMatch = () => {\n  return <div>Not Match</div>;\n};\n\nexport default NotMatch;\n","import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: `${process.env.REACT_APP_SERVER_URL}/graphql`,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      \"X-Forwarded-User\": localStorage.getItem(\"access_token\"),\n    },\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport Main from \"./pages/Main\";\nimport Login from \"./pages/Login\";\nimport NotMatch from \"./pages/NotMatch\";\nimport { client } from \"../middleware\";\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Router basename={process.env.PUBLIC_URL ? \"friend-ship-client\" : \"\"}>\n        <Routes>\n          <Route path=\"/\" element={<Main />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/*\" element={<NotMatch />} />\n        </Routes>\n      </Router>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ToastContainer } from \"react-toastify\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <ToastContainer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["generated/graphql.ts","components/atoms/Authentication/index.tsx","components/templates/Frame/index.tsx","utils/WebRTC/index.ts","utils/WebSocket/index.ts","utils/WebSocket/PublicCable/index.ts","utils/WebSocket/MyCable/index.ts","utils/WebAgent/index.ts","components/atoms/OverlayJoin/index.tsx","components/atoms/Button/index.tsx","components/atoms/SetUserMedia/index.tsx","components/atoms/Video/index.tsx","components/atoms/Audio/index.tsx","components/molecules/WebRTCRoom/index.tsx","components/organisms/OnlineRoom/index.tsx","components/pages/Main/index.tsx","components/atoms/InputText/index.tsx","components/atoms/InputPassword/index.tsx","components/organisms/LoginForm/index.tsx","components/pages/Login/index.tsx","components/pages/NotMatch/index.tsx","middleware/index.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultOptions","LoginDocument","gql","ViewerDocument","ViewerIdDocument","useViewerIdQuery","baseOptions","options","Apollo","Authentication","children","fetchPolicy","loading","data","viewer","to","Frame","className","WebRTC","currentUserId","handleUpdate","handleError","publicCable","myCable","localStream","peerConnections","connectionConfig","iceServers","urls","isEnableAudio","isEnableVideo","audioInputId","audioOutputId","videoInputId","this","Promise","resolve","a","navigator","mediaDevices","getUserMedia","audio","deviceId","video","then","stream","catch","e","message","userGuid","channelName","initPeerConnection","sdp","send","receiverGuid","createOffer","channel","close","videoTracks","videoStream","getTracks","audioTracks","audioStream","forEach","track","stop","senderGuid","disconnect","description","RTCSessionDescription","type","connection","setRemoteDescription","createAnswer","console","log","callbackSdp","RTCPeerConnection","createDataChannel","onicecandidate","event","candidate","localDescription","onnegotiationneeded","remoteDescription","sessionDescription","str","JSON","stringify","ontrack","streams","kind","ondatachannel","addVideoTrack","addAudioTrack","onopen","onclose","onerror","onmessage","msg","obj","parse","volume","setLocalDescription","getVideoTracks","addTrack","getAudioTracks","WebSocket","rtc","subscriptions","cable","webSocketUrl","process","localStorage","getItem","ActionCable","createConsumer","unsubscribe","perform","PublicCable","create","connected","received","messages","handleMessage","disconnected","notifyOffline","online","handleOnlineMessage","offline","handleOfflineMessage","user_guid","connect","MyCable","command","values","offer","handleOfferMessage","answer","handleAnswerMessage","sender_guid","setOffer","setAnswer","WebAgent","all","setup","notifyOnline","OverlayJoin","Button","props","defaultProps","SetUserMedia","joinRoom","useState","audioInputs","setAudioInputs","audioOutputs","setAudioOutputs","videoInputs","setVideoInputs","selectedAudioInputId","setSelectedAudioInputId","selectedAudioOutputId","setSelectedAudioOutputId","selectedVideoInputId","setSelectedVideoInputId","useEffect","enumerateDevices","devices","__audioInputs","filter","device","__audioOutputs","__videoInputs","usedDevises","find","onChange","currentTarget","value","map","audioInput","i","label","audioOutput","videoInput","onClick","setItem","disabled","Video","videoElm","useRef","current","srcObject","muted","play","ref","autoPlay","playsInline","Audio","audioElm","setSinkId","controls","WebRTCRoom","state","webAgent","updateRTC","bind","setError","leave","ready","error","setState","changeDevise","join","start","removeItem","Object","keys","Component","OnlineRoom","useViewerQuery","userId","id","userName","name","currentUserName","Main","TextInput","InputPassword","LoginForm","history","useNavigate","loginid","setLoginid","password","setPassword","useLoginMutation","update","_","response","login","user","token","accessToken","result","toast","success","variables","InputText","htmlFor","icon","faUser","faLockOpen","Login","NotMatch","httpLink","createHttpLink","uri","authLink","setContext","headers","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","basename","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d33cdfe.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AccessToken = {\n  __typename?: 'AccessToken';\n  id: Scalars['ID'];\n  token: Scalars['String'];\n};\n\n/** Autogenerated input type of Login */\nexport type LoginInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  loginid: Scalars['String'];\n  password: Scalars['String'];\n};\n\n/** Autogenerated return type of Login */\nexport type LoginPayload = {\n  __typename?: 'LoginPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  result?: Maybe<Scalars['Boolean']>;\n  user?: Maybe<User>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  login?: Maybe<LoginPayload>;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  viewer?: Maybe<User>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  accessToken?: Maybe<AccessToken>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  loginid: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', login?: { __typename?: 'LoginPayload', result?: boolean | null | undefined, user?: { __typename?: 'User', accessToken?: { __typename?: 'AccessToken', token: string } | null | undefined } | null | undefined } | null | undefined };\n\nexport type ViewerQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ViewerQuery = { __typename?: 'Query', viewer?: { __typename?: 'User', id: string, name?: string | null | undefined } | null | undefined };\n\nexport type ViewerIdQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ViewerIdQuery = { __typename?: 'Query', viewer?: { __typename?: 'User', id: string } | null | undefined };\n\n\nexport const LoginDocument = gql`\n    mutation login($loginid: String!, $password: String!) {\n  login(input: {loginid: $loginid, password: $password}) {\n    user {\n      accessToken {\n        token\n      }\n    }\n    result\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      loginid: // value for 'loginid'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const ViewerDocument = gql`\n    query viewer {\n  viewer {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useViewerQuery__\n *\n * To run a query within a React component, call `useViewerQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewerQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);\n      }\nexport function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);\n        }\nexport type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;\nexport type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;\nexport type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;\nexport const ViewerIdDocument = gql`\n    query viewerId {\n  viewer {\n    id\n  }\n}\n    `;\n\n/**\n * __useViewerIdQuery__\n *\n * To run a query within a React component, call `useViewerIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewerIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewerIdQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useViewerIdQuery(baseOptions?: Apollo.QueryHookOptions<ViewerIdQuery, ViewerIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ViewerIdQuery, ViewerIdQueryVariables>(ViewerIdDocument, options);\n      }\nexport function useViewerIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerIdQuery, ViewerIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ViewerIdQuery, ViewerIdQueryVariables>(ViewerIdDocument, options);\n        }\nexport type ViewerIdQueryHookResult = ReturnType<typeof useViewerIdQuery>;\nexport type ViewerIdLazyQueryHookResult = ReturnType<typeof useViewerIdLazyQuery>;\nexport type ViewerIdQueryResult = Apollo.QueryResult<ViewerIdQuery, ViewerIdQueryVariables>;","import React, { ReactNode } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { useViewerIdQuery } from \"../../../generated/graphql\";\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Authentication = ({ children }: Props) => {\n  const { loading, data } = useViewerIdQuery({ fetchPolicy: \"network-only\" });\n  const viewer = data?.viewer;\n\n  if (loading) {\n    return <>Loading ...</>;\n  } else if (!viewer) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return <>{children}</>;\n};\n\nexport default Authentication;\n","import React, { ReactNode } from \"react\";\nimport Authentication from \"../../atoms/Authentication\";\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Frame = ({ children }: Props) => {\n  return (\n    <Authentication>\n      <div className=\"main\">{children}</div>\n    </Authentication>\n  );\n};\n\nexport default Frame;\n","import PublicCable from \"../WebSocket/PublicCable\";\nimport MyCable from \"../WebSocket/MyCable\";\nimport { WebRTCTypes } from \"../../types\";\n\nclass WebRTC {\n  public publicCable: PublicCable | null = null;\n  public myCable: MyCable | null = null;\n  public localStream: WebRTCTypes.Stream = null;\n  public peerConnections: WebRTCTypes.PeerConnections = {};\n  private connectionConfig = {\n    iceServers: [\n      { urls: \"stun:stun.l.google.com:19302\" },\n      { urls: \"stun:stun1.l.google.com:19302\" },\n      { urls: \"stun:stun2.l.google.com:19302\" },\n    ],\n  };\n  private currentUserId: string;\n  private isEnableAudio: boolean = true;\n  private isEnableVideo: boolean = true;\n  private handleUpdate: Function;\n  private handleError: Function;\n  private audioInputId: string = \"\";\n  private audioOutputId: string = \"\";\n  private videoInputId: string = \"\";\n\n  constructor(\n    currentUserId: string,\n    handleUpdate: Function,\n    handleError: Function\n  ) {\n    this.currentUserId = currentUserId;\n    this.handleUpdate = handleUpdate;\n    this.handleError = handleError;\n  }\n\n  public setup(): Promise<void> {\n    return new Promise(async (resolve) => {\n      await navigator.mediaDevices\n        .getUserMedia({\n          audio: this.isEnableAudio && { deviceId: this.audioInputId },\n          video: this.isEnableVideo && { deviceId: this.videoInputId },\n        })\n        .then((stream) => {\n          this.localStream = stream;\n          resolve();\n        })\n        .catch((e) => {\n          this.handleError(e.message);\n        });\n    });\n  }\n\n  public connect(userGuid: string) {\n    const channelName = `channel-${this.currentUserId}_${userGuid}`;\n    this.peerConnections[userGuid] = this.initPeerConnection(\n      userGuid,\n      channelName,\n      (sdp: string) => {\n        this.myCable?.send(\"offer\", {\n          sdp,\n          receiverGuid: userGuid,\n        });\n      }\n    );\n\n    this.createOffer(userGuid);\n  }\n\n  public disconnect(userGuid: string) {\n    if (this.peerConnections[userGuid]) {\n      this.peerConnections[userGuid].channel.close();\n      const videoTracks =\n        this.peerConnections[userGuid].videoStream?.getTracks() || [];\n      const audioTracks =\n        this.peerConnections[userGuid].audioStream?.getTracks() || [];\n      const traks = [...videoTracks, ...audioTracks];\n      traks.forEach((track) => {\n        track.stop();\n      });\n      delete this.peerConnections[userGuid];\n\n      this.handleUpdate();\n    }\n  }\n\n  public setOffer(senderGuid: string, sdp: string) {\n    if (this.peerConnections[senderGuid]) this.disconnect(senderGuid);\n\n    const description = new RTCSessionDescription({\n      type: \"offer\",\n      sdp,\n    });\n\n    const channelName = `channel-${senderGuid}_${this.currentUserId}`;\n    this.peerConnections[senderGuid] = this.initPeerConnection(\n      senderGuid,\n      channelName,\n      (sdp: string) => {\n        this.myCable?.send(\"answer\", {\n          sdp,\n          receiverGuid: senderGuid,\n        });\n      }\n    );\n\n    this.peerConnections[senderGuid].connection\n      .setRemoteDescription(description)\n      .then(() => {\n        this.createAnswer(senderGuid);\n      });\n  }\n\n  public setAnswer(senderGuid: string, sdp: string) {\n    const description = new RTCSessionDescription({\n      type: \"answer\",\n      sdp,\n    });\n\n    this.peerConnections[senderGuid].connection\n      .setRemoteDescription(description)\n      .catch((e) => {\n        console.log(\n          \"error setRemoteDescription\",\n          e,\n          this.peerConnections[senderGuid]\n        );\n      });\n  }\n\n  public changeDevise({\n    audioInputId,\n    videoInputId,\n  }: {\n    audioInputId?: string;\n    audioOutputId?: string;\n    videoInputId?: string;\n  }): Promise<MediaStream> {\n    this.audioInputId = audioInputId || this.audioInputId;\n    this.videoInputId = videoInputId || this.videoInputId;\n\n    const options = {\n      audio: this.isEnableAudio && { deviceId: this.audioInputId },\n      video: this.isEnableVideo && { deviceId: this.videoInputId },\n    };\n\n    return navigator.mediaDevices.getUserMedia(options).then((stream) => {\n      return (this.localStream = stream);\n    });\n  }\n\n  private initPeerConnection(\n    userGuid: string,\n    channelName: string,\n    callbackSdp: Function\n  ): WebRTCTypes.PeerConnection {\n    const connection = new RTCPeerConnection(this.connectionConfig);\n    const channel = connection.createDataChannel(channelName);\n\n    connection.onicecandidate = (event) => {\n      if (!event.candidate && connection.localDescription?.sdp) {\n        callbackSdp(connection.localDescription.sdp);\n      }\n    };\n\n    if (userGuid === \"VXNlci0y\") {\n      connection.onnegotiationneeded = (event) => {\n        console.log(\"onnegotiationneeded\", event);\n\n        if (!this.peerConnections[userGuid].connection.localDescription) return;\n        if (!this.peerConnections[userGuid].connection.remoteDescription)\n          return;\n\n        // Add Trackした時に通る\n        console.log(\"onnegotiationneeded add track\", event);\n\n        this.createOffer(userGuid).then((sessionDescription) => {\n          const str = JSON.stringify(sessionDescription);\n          this.peerConnections[userGuid].channel.send(str);\n        });\n      };\n    }\n\n    connection.ontrack = (event) => {\n      console.log(\"ontrack\", event);\n\n      const stream = event.streams[0];\n      const track = event.track;\n\n      if (track.kind === \"video\") {\n        this.peerConnections[userGuid].videoStream = stream;\n      } else if (track.kind === \"audio\") {\n        this.peerConnections[userGuid].audioStream = stream;\n      }\n\n      this.handleUpdate();\n    };\n\n    connection.ondatachannel = (event) => {\n      // datachannel open時に通る\n      console.log(\"ondatachannel\", event);\n      this.peerConnections[userGuid].channel = event.channel;\n\n      this.addVideoTrack(userGuid);\n      this.addAudioTrack(userGuid);\n    };\n\n    channel.onopen = () => {\n      console.log(\"datachannel open\");\n    };\n\n    channel.onclose = () => {\n      console.log(\"datachannel close\");\n    };\n\n    channel.onerror = (e) => {\n      console.log(\"datachannel error\", e);\n    };\n\n    channel.onmessage = (event) => {\n      const msg = event.data;\n      const obj = JSON.parse(msg);\n\n      if (obj.type === \"text\") {\n        console.log(\"onmessage text\", msg);\n      } else if (obj.type === \"offer\") {\n        console.log(\"onmessage offer\");\n        this.peerConnections[userGuid].connection\n          .setRemoteDescription(obj)\n          .then(() => {\n            console.log(\"create answer\");\n            this.createAnswer(userGuid).then((sessionDescription) => {\n              console.log(\"created answer\");\n              const str = JSON.stringify(sessionDescription);\n              this.peerConnections[userGuid].channel.send(str);\n            });\n          });\n      } else if (obj.type === \"answer\") {\n        console.log(\"onmessage answer\");\n        this.peerConnections[userGuid].connection.setRemoteDescription(obj);\n      }\n    };\n\n    return {\n      connection,\n      channel,\n      volume: 0.5,\n    };\n  }\n\n  private createOffer(userGuid: string) {\n    return this.peerConnections[userGuid].connection\n      .createOffer({})\n      .then((sessionDescription) => {\n        this.peerConnections[userGuid].connection.setLocalDescription(\n          sessionDescription\n        );\n\n        return sessionDescription;\n      });\n  }\n\n  private createAnswer(userGuid: string) {\n    return this.peerConnections[userGuid].connection\n      .createAnswer({})\n      .then((sessionDescription) => {\n        this.peerConnections[userGuid].connection.setLocalDescription(\n          sessionDescription\n        );\n\n        return sessionDescription;\n      });\n  }\n\n  private addVideoTrack(userGuid: string) {\n    // navigator.mediaDevices\n    //   .getUserMedia({\n    //     video: { deviceId: { exact: this.videoId } },\n    //   })\n    //   .then((stream) => {\n    if (!this.localStream) return;\n    // this.localStream = stream;\n    // debugger;\n    // this.handleUpdate();\n\n    const track = this.localStream.getVideoTracks()[0];\n    // const track = stream.getVideoTracks()[0];\n    this.peerConnections[userGuid].connection.addTrack(track, this.localStream);\n    // });\n  }\n\n  private addAudioTrack(userGuid: string) {\n    if (!this.localStream) return;\n\n    const track = this.localStream.getAudioTracks()[0];\n    this.peerConnections[userGuid].connection.addTrack(track, this.localStream);\n  }\n}\n\nexport default WebRTC;\n","import ActionCable from \"actioncable\";\nimport WebRTC from \"../WebRTC\";\nimport { WebSocketTypes } from \"../../types\";\n\nclass WebSocket {\n  public rtc: WebRTC | null;\n  protected subscriptions: ActionCable.Subscriptions;\n  protected cable: WebSocketTypes.Cable;\n  protected currentUserId: string;\n  private webSocketUrl: string = `${\n    process.env.REACT_APP_SERVER_URL\n  }/cable?access_token=${localStorage.getItem(\"access_token\")}`;\n\n  constructor(currentUserId: string) {\n    this.rtc = null;\n    this.currentUserId = currentUserId;\n    this.subscriptions = ActionCable.createConsumer(\n      this.webSocketUrl\n    ).subscriptions;\n    this.cable = null;\n  }\n\n  public disconnect() {\n    this.cable?.unsubscribe();\n  }\n\n  protected notifyOffline() {\n    this.cable?.perform(\"offline\", {});\n  }\n}\n\nexport default WebSocket;\n","import WebSocket from \"../../WebSocket\";\nimport { WebSocketTypes } from \"../../../types\";\n\nclass PublicCable extends WebSocket {\n  public setup(): Promise<void> {\n    return new Promise((resolve) => {\n      this.cable = this.subscriptions.create(\"PostChannel\", {\n        connected: () => {\n          resolve();\n        },\n        received: (messages: WebSocketTypes.Messages) => {\n          this.handleMessage(messages);\n        },\n        disconnected: () => {\n          this.notifyOffline();\n        },\n      });\n    });\n  }\n\n  public notifyOnline() {\n    this.cable?.perform(\"online\", {});\n  }\n\n  private handleMessage(messages: WebSocketTypes.Messages) {\n    if (messages.online) {\n      this.handleOnlineMessage(messages.online);\n    } else if (messages.offline) {\n      this.handleOfflineMessage(messages.offline);\n    }\n  }\n\n  private handleOnlineMessage({\n    user_guid: userGuid,\n  }: WebSocketTypes.MessageUserGuid) {\n    // 自分の通知は無視\n    if (this.currentUserId === userGuid) return;\n\n    console.log(`${userGuid} がオンライン`);\n\n    this.rtc?.connect(userGuid);\n  }\n\n  private handleOfflineMessage({\n    user_guid: userGuid,\n  }: WebSocketTypes.MessageUserGuid) {\n    // 自分の通知は無視\n    if (this.currentUserId === userGuid) return;\n\n    console.log(`${userGuid} がオフライン`);\n\n    this.rtc?.disconnect(userGuid);\n  }\n}\n\nexport default PublicCable;\n","import WebSocket from \"../../WebSocket\";\nimport { WebSocketTypes } from \"../../../types\";\n\nclass MyCable extends WebSocket {\n  public setup(): Promise<void> {\n    return new Promise((resolve) => {\n      this.cable = this.subscriptions.create(\"UserChannel\", {\n        connected: () => {\n          resolve();\n        },\n        received: (messages: WebSocketTypes.Messages) => {\n          this.handleMessage(messages);\n        },\n        disconnected: () => {\n          this.notifyOffline();\n        },\n      });\n    });\n  }\n\n  public send(command: string, values: Object) {\n    this.cable?.perform(command, values);\n  }\n\n\n  private handleMessage(messages: WebSocketTypes.Messages) {\n    if (messages.offer) {\n      this.handleOfferMessage(messages.offer);\n    } else if (messages.answer) {\n      this.handleAnswerMessage(messages.answer);\n    }\n  }\n\n  private handleOfferMessage({\n    sdp,\n    sender_guid: senderGuid,\n  }: WebSocketTypes.MessageOffer) {\n    console.log(\"offer受信\");\n\n    this.rtc?.setOffer(senderGuid, sdp);\n  }\n\n  private handleAnswerMessage({\n    sdp,\n    sender_guid: senderGuid,\n  }: WebSocketTypes.MessageAnswer) {\n    console.log(\"answer受信\");\n\n    this.rtc?.setAnswer(senderGuid, sdp);\n  }\n}\n\nexport default MyCable;\n","import WebRTC from \"../WebRTC\";\nimport PublicCable from \"../WebSocket/PublicCable\";\nimport MyCable from \"../WebSocket/MyCable\";\n\nclass WebAgent {\n  public rtc: WebRTC;\n  private publicCable: PublicCable;\n  private myCable: MyCable;\n\n  constructor(\n    currentUserId: string,\n    handleUpdate: Function,\n    handleError: Function\n  ) {\n    this.rtc = new WebRTC(currentUserId, handleUpdate, handleError);\n    this.publicCable = new PublicCable(currentUserId);\n    this.myCable = new MyCable(currentUserId);\n\n    this.rtc.publicCable = this.publicCable;\n    this.rtc.myCable = this.myCable;\n    this.publicCable.rtc = this.rtc;\n    this.myCable.rtc = this.rtc;\n  }\n\n  public leave() {\n    this.publicCable.disconnect();\n    this.myCable.disconnect();\n  }\n\n  public setup(): Promise<void> {\n    return Promise.all([\n      this.rtc.setup(),\n      this.publicCable.setup(),\n      this.myCable.setup(),\n    ]).then(() => console.log(\"completed setup\"));\n  }\n\n  public join() {\n    this.publicCable.notifyOnline();\n  }\n}\n\nexport default WebAgent;\n","import React, { ReactChild } from \"react\";\n\ninterface Props {\n  children: ReactChild;\n}\n\nconst OverlayJoin = ({ children }: Props) => {\n  return (\n    <div className=\"absolute inset-0 bg-black opacity-50 flex items-center justify-center\">\n      {children}\n    </div>\n  );\n};\n\nexport default OverlayJoin;\n","import React, { ButtonHTMLAttributes } from \"react\";\n\nconst Button = ({\n  className,\n  ...props\n}: ButtonHTMLAttributes<HTMLButtonElement>) => {\n  return (\n    <button\n      {...props}\n      className={`${className} bg-gray-500 text-gray-50 px-3 py-1`}\n    />\n  );\n};\n\nButton.defaultProps = {\n  className: \"\",\n};\n\nexport default Button;\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"../../atoms/Button\";\n\ninterface Props {\n  joinRoom: (\n    audioInputId: string,\n    audioOutputId: string,\n    videoInputId: string\n  ) => void;\n}\n\nconst SetUserMedia = ({ joinRoom }: Props) => {\n  const [audioInputs, setAudioInputs] = useState<MediaDeviceInfo[]>([]);\n  const [audioOutputs, setAudioOutputs] = useState<MediaDeviceInfo[]>([]);\n  const [videoInputs, setVideoInputs] = useState<MediaDeviceInfo[]>([]);\n  const [selectedAudioInputId, setSelectedAudioInputId] = useState<string>();\n  const [selectedAudioOutputId, setSelectedAudioOutputId] = useState<string>();\n  const [selectedVideoInputId, setSelectedVideoInputId] = useState<string>();\n\n  useEffect(() => {\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\n      const __audioInputs = devices.filter(\n        (device) => device.kind === \"audioinput\"\n      );\n      const __audioOutputs = devices.filter(\n        (device) => device.kind === \"audiooutput\"\n      );\n      const __videoInputs = devices.filter(\n        (device) => device.kind === \"videoinput\"\n      );\n      setAudioInputs(__audioInputs);\n      setAudioOutputs(__audioOutputs);\n      setVideoInputs(__videoInputs);\n\n      try {\n        const usedDevises = JSON.parse(localStorage.getItem(\"devises\") || \"\");\n\n        setSelectedAudioInputId(\n          devices.find(\n            ({ deviceId }) => deviceId === usedDevises.selectedAudioInputId\n          )?.deviceId || __audioInputs[0].deviceId\n        );\n        setSelectedAudioOutputId(\n          devices.find(\n            ({ deviceId }) => deviceId === usedDevises.selectedAudioOutputId\n          )?.deviceId || __audioOutputs[0].deviceId\n        );\n        setSelectedVideoInputId(\n          devices.find(\n            ({ deviceId }) => deviceId === usedDevises.selectedVideoInputId\n          )?.deviceId || __videoInputs[0].deviceId\n        );\n      } catch {\n        setSelectedAudioInputId(__audioInputs[0].deviceId);\n        setSelectedAudioOutputId(__audioOutputs[0].deviceId);\n        setSelectedVideoInputId(__videoInputs[0].deviceId);\n      }\n    });\n  }, []);\n\n  const join = () => {\n    if (selectedAudioInputId && selectedAudioOutputId && selectedVideoInputId) {\n      const devices = {\n        selectedAudioInputId,\n        selectedAudioOutputId,\n        selectedVideoInputId,\n      };\n\n      localStorage.setItem(\"devises\", JSON.stringify(devices));\n\n      joinRoom(\n        selectedAudioInputId,\n        selectedAudioOutputId,\n        selectedVideoInputId\n      );\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-50 rounded-lg p-3\">\n      <div className=\"text-xl pb-3\">設定</div>\n      <div className=\"pb-3\">\n        <div className=\"pb-1\">\n          <div className=\"text-center\">入力</div>\n          <select\n            className=\"form-select appearance-none block w-full mx-1 px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded\"\n            onChange={(e) => setSelectedAudioInputId(e.currentTarget.value)}\n            value={selectedAudioInputId}\n          >\n            {audioInputs.map((audioInput, i) => {\n              return (\n                <option key={i} value={audioInput.deviceId}>\n                  {audioInput.label}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className=\"pb-1\">\n          <div className=\"text-center\">出力</div>\n          <select\n            className=\"form-select appearance-none block w-full mx-1 px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded\"\n            onChange={(e) => setSelectedAudioOutputId(e.currentTarget.value)}\n            value={selectedAudioOutputId}\n          >\n            {audioOutputs.map((audioOutput, i) => {\n              return (\n                <option key={i} value={audioOutput.deviceId}>\n                  {audioOutput.label}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className=\"pb-1\">\n          <div className=\"text-center\">カメラ</div>\n          <select\n            className=\"form-select appearance-none block w-full mx-1 px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded\"\n            onChange={(e) => setSelectedVideoInputId(e.currentTarget.value)}\n            value={selectedVideoInputId}\n          >\n            {videoInputs.map((videoInput, i) => {\n              return (\n                <option key={i} value={videoInput.deviceId}>\n                  {videoInput.label}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      </div>\n      <div className=\"flex justify-center\">\n        <Button\n          className=\"rounded\"\n          onClick={join}\n          disabled={\n            !selectedAudioInputId ||\n            !selectedAudioOutputId ||\n            !selectedVideoInputId\n          }\n        >\n          参加\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SetUserMedia;\n","import React, { useEffect, useRef } from \"react\";\n\ninterface Props {\n  stream: MediaStream;\n}\n\nconst Video = ({ stream }: Props) => {\n  const videoElm = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    if (videoElm.current) {\n      videoElm.current.srcObject = stream;\n      videoElm.current.muted = true;\n      videoElm.current.volume = 0;\n      videoElm.current.play();\n    }\n\n    return () => stream.getTracks().forEach((track) => track.stop());\n  }, [stream]);\n\n  return <video ref={videoElm} autoPlay playsInline className=\"w-60 border\" />;\n};\n\nexport default Video;\n","import React, { useEffect, useRef } from \"react\";\n\ninterface Props {\n  stream: MediaStream;\n  volume: number;\n  audioOutputId: string;\n}\n\ninterface HTMLMediaElement extends HTMLAudioElement {\n  setSinkId: (sinkId: string) => Promise<undefined>;\n}\n\nconst Audio = ({ stream, volume, audioOutputId }: Props) => {\n  // const audioElm = useRef<any>(null);\n  const audioElm = useRef<HTMLMediaElement>(null);\n\n  useEffect(() => {\n    if (audioElm.current) {\n      audioElm.current.srcObject = stream;\n      audioElm.current.play();\n      audioElm.current.volume = volume;\n      audioElm.current.setSinkId(audioOutputId);\n    }\n  }, [stream, volume, audioOutputId]);\n\n  return <audio ref={audioElm} autoPlay controls className=\"hidden\" />;\n};\n\nexport default Audio;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport WebAgent from \"../../../utils/WebAgent\";\nimport OverlayJoin from \"../../atoms/OverlayJoin\";\nimport SetUserMedia from \"../../atoms/SetUserMedia\";\nimport Button from \"../../atoms/Button\";\nimport Video from \"../../atoms/Video\";\nimport Audio from \"../../atoms/Audio\";\nimport { WebRTCTypes } from \"../../../types\";\n\ninterface Props {\n  currentUserId: string;\n  currentUserName: string;\n}\n\ninterface State {\n  webAgent: WebAgent;\n  leave: boolean;\n  setup: boolean;\n  ready: boolean;\n  error: string;\n  audioInputId: string;\n  audioOutputId: string;\n  videoInputId: string;\n  localStream: WebRTCTypes.Stream;\n  peerConnections: WebRTCTypes.PeerConnections;\n}\n\nclass WebRTCRoom extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      webAgent: new WebAgent(\n        this.props.currentUserId,\n        this.updateRTC.bind(this),\n        this.setError.bind(this)\n      ),\n      leave: true,\n      setup: false,\n      ready: false,\n      error: \"\",\n      audioInputId: \"\",\n      audioOutputId: \"\",\n      videoInputId: \"\",\n      localStream: null,\n      peerConnections: {},\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.webAgent.leave();\n  }\n\n  private start() {\n    this.state.webAgent.setup().then(() => {\n      this.setState({\n        leave: false,\n        setup: true,\n      });\n    });\n  }\n\n  private joinRoom(\n    audioInputId: string,\n    audioOutputId: string,\n    videoInputId: string\n  ) {\n    this.state.webAgent.rtc\n      .changeDevise({ audioInputId, videoInputId })\n      .then((localStream) => {\n        this.setState({\n          setup: false,\n          ready: true,\n          audioInputId,\n          audioOutputId,\n          videoInputId,\n          localStream,\n        });\n\n        this.state.webAgent.join();\n      });\n  }\n\n  private updateRTC() {\n    this.setState({\n      peerConnections: this.state.webAgent.rtc.peerConnections,\n    });\n  }\n\n  private setError(error: string) {\n    this.setState({ error });\n  }\n\n  render() {\n    if (!this.state) return <></>;\n    if (this.state.error) return <>{this.state.error}</>;\n    if (this.state.leave) {\n      return (\n        <OverlayJoin>\n          <Button className=\"py-4 px-5 rounded\" onClick={this.start.bind(this)}>\n            スタート\n          </Button>\n        </OverlayJoin>\n      );\n    }\n    if (this.state.setup) {\n      return (\n        <OverlayJoin>\n          <SetUserMedia joinRoom={this.joinRoom.bind(this)} />\n        </OverlayJoin>\n      );\n    }\n    if (!this.state.ready) return <>準備中...</>;\n\n    return (\n      <div className=\"flex flex-col min-h-screen h-full bg-gray-100\">\n        <header className=\"p-3 bg-red-500 text-white\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-none text-2xl\">Friend Ship</div>\n            <div className=\"flex-auto\">\n              <Link\n                to=\"/login\"\n                className=\"bg-gray-500 text-gray-50 px-3 py-1 rounded float-right\"\n                onClick={() => localStorage.removeItem(\"access_token\")}\n              >\n                退出\n              </Link>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"flex-grow\">\n          <section className=\"container mx-auto p-4\">\n            <div className=\"flex flex-wrap justify-center\">\n              {this.state.localStream && (\n                <Video stream={this.state.localStream} />\n              )}\n\n              {Object.keys(this.state.peerConnections).map((userGuid) => {\n                const connection = this.state.peerConnections[userGuid];\n                const videoStream = connection.videoStream;\n                const audioStream = connection.audioStream;\n                const volume = connection.volume;\n\n                return (\n                  <div key={userGuid}>\n                    {videoStream && <Video stream={videoStream} />}\n                    {audioStream && (\n                      <Audio\n                        stream={audioStream}\n                        volume={volume}\n                        audioOutputId={this.state.audioOutputId}\n                      />\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default WebRTCRoom;\n","import React from \"react\";\nimport WebRTCRoom from \"../../molecules/WebRTCRoom\";\nimport { useViewerQuery } from \"../../../generated/graphql\";\n\nconst OnlineRoom = () => {\n  const { loading, data } = useViewerQuery({\n    fetchPolicy: \"network-only\",\n  });\n  const userId = data?.viewer?.id;\n  const userName = data?.viewer?.name;\n\n  if (loading) {\n    return <>Loading ...</>;\n  } else if (!userId) {\n    return <>Failed</>;\n  } else {\n    return (\n      <WebRTCRoom currentUserId={userId} currentUserName={userName || \"\"} />\n    );\n  }\n};\n\nexport default OnlineRoom;\n","import React from \"react\";\nimport Frame from \"../../templates/Frame\";\nimport OnlineRoom from \"../../organisms/OnlineRoom\";\n\nconst Main = () => {\n  return (\n    <Frame>\n      <OnlineRoom />\n    </Frame>\n  );\n};\n\nexport default Main;\n","import React, { InputHTMLAttributes } from \"react\";\n\nconst TextInput = (props: InputHTMLAttributes<HTMLInputElement>) => {\n  return <input type=\"text\" {...props} />;\n};\n\nexport default TextInput;\n","import React, { InputHTMLAttributes } from \"react\";\n\nconst InputPassword = (props: InputHTMLAttributes<HTMLInputElement>) => {\n  return <input type=\"password\" {...props} />;\n};\n\nexport default InputPassword;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser, faLockOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport InputText from \"../../atoms/InputText\";\nimport InputPassword from \"../../atoms/InputPassword\";\nimport { useLoginMutation } from \"../../../generated/graphql\";\n\nconst LoginForm = () => {\n  const history = useNavigate();\n  const [loginid, setLoginid] = useState<string>();\n  const [password, setPassword] = useState<string>();\n  const [login, { loading }] = useLoginMutation({\n    update: (_, { data }) => {\n      const response = data?.login;\n      const user = response?.user;\n      const token = user?.accessToken?.token;\n\n      if (response?.result && token) {\n        toast.success(\"Successful login\");\n        localStorage.setItem(\"access_token\", token);\n        history(\"/\");\n      } else {\n        toast.error(\"Login failed\");\n      }\n    },\n    variables: {\n      loginid: loginid || \"\",\n      password: password || \"\",\n    },\n  });\n\n  return (\n    <div className=\"h-screen flex items-center justify-center bg-gradient-to-r from-yellow-400 via-red-500 to-pink-500\">\n      <div className=\"bg-gray-50 p-5 rounded-lg shadow-2xl\">\n        <div className=\"text-2xl text-center\">Login</div>\n        <div className=\"my-5\">\n          <div className=\"flex items-center border rounded mb-5\">\n            <InputText\n              value={loginid || \"\"}\n              onChange={(e) => setLoginid(e.currentTarget.value)}\n              id=\"loginid\"\n              className=\"w-full h-9 bg-transparent py-1 px-2 outline-none disabled:bg-gray-200\"\n              disabled={loading}\n            />\n            <label\n              htmlFor=\"loginid\"\n              className=\"px-3 py-1.5 bg-gray-200 border-l\"\n            >\n              <FontAwesomeIcon icon={faUser} />\n            </label>\n          </div>\n          <div className=\"flex items-center border rounded mb-5\">\n            <InputPassword\n              value={password || \"\"}\n              onChange={(e) => setPassword(e.currentTarget.value)}\n              id=\"password\"\n              className=\"w-full h-9 bg-transparent py-1 px-2 outline-none disabled:bg-gray-200\"\n              disabled={loading}\n            />\n            <label\n              htmlFor=\"password\"\n              className=\"px-3 py-1.5 bg-gray-200 border-l\"\n            >\n              <FontAwesomeIcon icon={faLockOpen} />\n            </label>\n          </div>\n        </div>\n\n        <button\n          className=\"bg-gradient-to-r from-blue-100 to-blue-200 w-full rounded-full p-2 hover:from-blue-300 hover:to-blue-400 hover:text-white\"\n          onClick={() => login()}\n          disabled={loading}\n        >\n          Login\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport LoginForm from \"../../organisms/LoginForm\";\nimport { useViewerIdQuery } from \"../../../generated/graphql\";\n\nconst Login = () => {\n  const { loading, data } = useViewerIdQuery({ fetchPolicy: \"network-only\" });\n  const viewer = data?.viewer;\n\n  if (loading) {\n    return <>Loading ...</>;\n  } else if (viewer) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return <LoginForm />;\n};\n\nexport default Login;\n","import * as React from \"react\";\n\nconst NotMatch = () => {\n  return <div>Not Match</div>;\n};\n\nexport default NotMatch;\n","import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: `${process.env.REACT_APP_SERVER_URL}/graphql`,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      \"X-Forwarded-User\": localStorage.getItem(\"access_token\"),\n    },\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport Main from \"./pages/Main\";\nimport Login from \"./pages/Login\";\nimport NotMatch from \"./pages/NotMatch\";\nimport { client } from \"../middleware\";\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Router basename={process.env.PUBLIC_URL ? \"friend-ship-client\" : \"\"}>\n        <Routes>\n          <Route path=\"/\" element={<Main />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/*\" element={<NotMatch />} />\n        </Routes>\n      </Router>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ToastContainer } from \"react-toastify\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <ToastContainer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}